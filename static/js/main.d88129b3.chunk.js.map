{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","text","icon","onClick","deleteItem","duration","easing","library","add","faTimes","App","state","currentItem","handleInput","bind","addItem","e","this","setState","target","value","Date","now","preventDefault","newItem","console","log","newItems","filteredItems","filter","id","onSubmit","type","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qUA8BeA,MAzBf,SAAmBC,GACf,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GACxB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACCF,EAAKG,KACF,8BACI,kBAAC,IAAD,CACAF,UAAU,UACVG,KAAK,QACLC,QAAU,kBAAMT,EAAMU,WAAWN,EAAKE,cAMtD,OACI,6BACI,kBAAC,IAAD,CAAUK,SAAU,IAAKC,OAAO,eAC3BX,K,eCnBjBY,IAAQC,IAAIC,K,IAwEGC,E,kDAnEb,WAAYhB,GAAO,IAAD,8BAChB,cAAMA,IACDiB,MAAM,CACTf,MAAM,GACNgB,YAAY,CACVX,KAAK,GACLD,IAAI,KAGR,EAAKa,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKV,WAAa,EAAKA,WAAWU,KAAhB,gBAXF,E,wDAcNE,GACVC,KAAKC,SAAS,CACZN,YAAY,CACVX,KAAMe,EAAEG,OAAOC,MACfpB,IAAKqB,KAAKC,W,8BAKRN,GACNA,EAAEO,iBACF,IAAMC,EAAUP,KAAKN,MAAMC,YAE3B,GADAa,QAAQC,IAAIF,GACM,KAAfA,EAAQvB,KAAU,CACnB,IAAM0B,EAAQ,sBAAOV,KAAKN,MAAMf,OAAlB,CAAyB4B,IACvCP,KAAKC,SAAS,CACZtB,MAAO+B,EACPf,YAAY,CACVX,KAAK,GACLD,IAAI,S,iCAMDA,GACT,IAAM4B,EAAiBX,KAAKN,MAAMf,MAAMiC,QAAO,SAAA/B,GAAI,OACjDA,EAAKE,MAAMA,KACXiB,KAAKC,SAAS,CACZtB,MAAMgC,M,+BAKV,OACE,yBAAK7B,UAAU,OACb,gCACE,0BAAM+B,GAAG,WAAWC,SAAUd,KAAKF,SACjC,2BACAiB,KAAK,OAAOC,YAAY,yBACxBb,MAASH,KAAKN,MAAMC,YAAYX,KAChCiC,SAAUjB,KAAKJ,gBAInB,kBAAC,EAAD,CACAjB,MAASqB,KAAKN,MAAMf,MACpBQ,WAAca,KAAKb,kB,GA/DT+B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.d88129b3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './ListItems.css';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport FlipMove from 'react-flip-move';\n\nfunction ListItems(props){\n    const items = props.items;\n    const listItems = items.map(item => {\n        return <div className=\"list\" key={item.key}>\n            <p>\n            {item.text}    \n                <span>\n                    <FontAwesomeIcon \n                    className=\"faicons\" \n                    icon=\"times\"\n                    onClick={ () => props.deleteItem(item.key)\n                    }/>\n                </span>\n            </p>\n        </div>\n    })\n    return(\n        <div>\n            <FlipMove duration={100} easing=\"ease-in-out\">\n                {listItems}\n            </FlipMove>\n        </div>\n    )\n} \n\nexport default ListItems;","import React, { Component } from 'react';\nimport './App.css';\nimport ListItems from './ListItems';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {faTimes} from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faTimes);\n\n\nclass App extends Component {\n  \n  constructor(props){\n    super(props);\n    this.state={\n      items:[],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n    this.handleInput = this.handleInput.bind(this)\n    this.addItem = this.addItem.bind(this)\n    this.deleteItem = this.deleteItem.bind(this)\n  }\n\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n    if(newItem.text!==\"\"){\n      const newItems = [...this.state.items, newItem];\n      this.setState({\n        items: newItems,\n        currentItem:{\n          text:'',\n          key:''\n        }\n      })\n    }\n  }\n\n  deleteItem(key){\n    const filteredItems =  this.state.items.filter(item => \n      item.key!==key);\n      this.setState({\n        items:filteredItems\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <form id=\"todoform\" onSubmit={this.addItem}>\n            <input \n            type=\"text\" placeholder=\"What needs to be done.\" \n            value = {this.state.currentItem.text}\n            onChange={this.handleInput} />\n            {/* <button type=\"submit\">Add</button> */}\n          </form>\n        </header>\n        <ListItems \n        items = {this.state.items}\n        deleteItem = {this.deleteItem} ></ListItems>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}